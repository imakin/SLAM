"""autogenerated by genmsg_py from Landmark.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import roslib.rostime

class Landmark(roslib.message.Message):
  _md5sum = "ddf48c68437a26f2250fc9b5c4118fb2"
  _type = "slam_makin/Landmark"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time last_update
string landmark_id
geometry_msgs/Point position
float64[9] position_covariance

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['last_update','landmark_id','position','position_covariance']
  _slot_types = ['time','string','geometry_msgs/Point','float64[9]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       last_update,landmark_id,position,position_covariance
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Landmark, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.last_update is None:
        self.last_update = roslib.rostime.Time()
      if self.landmark_id is None:
        self.landmark_id = ''
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.position_covariance is None:
        self.position_covariance = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
    else:
      self.last_update = roslib.rostime.Time()
      self.landmark_id = ''
      self.position = geometry_msgs.msg.Point()
      self.position_covariance = [0.,0.,0.,0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.last_update.secs, _x.last_update.nsecs))
      _x = self.landmark_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.position.x, _x.position.y, _x.position.z))
      buff.write(_struct_9d.pack(*self.position_covariance))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.last_update is None:
        self.last_update = roslib.rostime.Time()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.last_update.secs, _x.last_update.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.landmark_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.position.x, _x.position.y, _x.position.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.position_covariance = _struct_9d.unpack(str[start:end])
      self.last_update.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.last_update.secs, _x.last_update.nsecs))
      _x = self.landmark_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.position.x, _x.position.y, _x.position.z))
      buff.write(self.position_covariance.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.last_update is None:
        self.last_update = roslib.rostime.Time()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.last_update.secs, _x.last_update.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.landmark_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.position.x, _x.position.y, _x.position.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 72
      self.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      self.last_update.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_9d = struct.Struct("<9d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
