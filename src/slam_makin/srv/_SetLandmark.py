"""autogenerated by genmsg_py from SetLandmarkRequest.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg

class SetLandmarkRequest(roslib.message.Message):
  _md5sum = "3a728969e9be1948ad1516696bacf677"
  _type = "slam_makin/SetLandmarkRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/PoseWithCovariance landmark
string topic_name

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['landmark','topic_name']
  _slot_types = ['geometry_msgs/PoseWithCovariance','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       landmark,topic_name
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SetLandmarkRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.landmark is None:
        self.landmark = geometry_msgs.msg.PoseWithCovariance()
      if self.topic_name is None:
        self.topic_name = ''
    else:
      self.landmark = geometry_msgs.msg.PoseWithCovariance()
      self.topic_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.landmark.pose.position.x, _x.landmark.pose.position.y, _x.landmark.pose.position.z, _x.landmark.pose.orientation.x, _x.landmark.pose.orientation.y, _x.landmark.pose.orientation.z, _x.landmark.pose.orientation.w))
      buff.write(_struct_36d.pack(*self.landmark.covariance))
      _x = self.topic_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.landmark is None:
        self.landmark = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.landmark.pose.position.x, _x.landmark.pose.position.y, _x.landmark.pose.position.z, _x.landmark.pose.orientation.x, _x.landmark.pose.orientation.y, _x.landmark.pose.orientation.z, _x.landmark.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.landmark.covariance = _struct_36d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.topic_name = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.landmark.pose.position.x, _x.landmark.pose.position.y, _x.landmark.pose.position.z, _x.landmark.pose.orientation.x, _x.landmark.pose.orientation.y, _x.landmark.pose.orientation.z, _x.landmark.pose.orientation.w))
      buff.write(self.landmark.covariance.tostring())
      _x = self.topic_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.landmark is None:
        self.landmark = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.landmark.pose.position.x, _x.landmark.pose.position.y, _x.landmark.pose.position.z, _x.landmark.pose.orientation.x, _x.landmark.pose.orientation.y, _x.landmark.pose.orientation.z, _x.landmark.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.landmark.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.topic_name = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_36d = struct.Struct("<36d")
_struct_7d = struct.Struct("<7d")
"""autogenerated by genmsg_py from SetLandmarkResponse.msg. Do not edit."""
import roslib.message
import struct


class SetLandmarkResponse(roslib.message.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "slam_makin/SetLandmarkResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SetLandmarkResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
class SetLandmark(roslib.message.ServiceDefinition):
  _type          = 'slam_makin/SetLandmark'
  _md5sum = '3a728969e9be1948ad1516696bacf677'
  _request_class  = SetLandmarkRequest
  _response_class = SetLandmarkResponse
