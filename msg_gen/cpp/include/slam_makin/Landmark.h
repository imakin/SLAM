/* Auto-generated by genmsg_cpp for file /home/kaca/ros/slam_makin/msg/Landmark.msg */
#ifndef SLAM_MAKIN_MESSAGE_LANDMARK_H
#define SLAM_MAKIN_MESSAGE_LANDMARK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"

namespace slam_makin
{
template <class ContainerAllocator>
struct Landmark_ {
  typedef Landmark_<ContainerAllocator> Type;

  Landmark_()
  : last_update()
  , landmark_id()
  , position()
  , position_covariance()
  {
    position_covariance.assign(0.0);
  }

  Landmark_(const ContainerAllocator& _alloc)
  : last_update()
  , landmark_id(_alloc)
  , position(_alloc)
  , position_covariance()
  {
    position_covariance.assign(0.0);
  }

  typedef ros::Time _last_update_type;
  ros::Time last_update;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _landmark_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  landmark_id;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Point_<ContainerAllocator>  position;

  typedef boost::array<double, 9>  _position_covariance_type;
  boost::array<double, 9>  position_covariance;


  ROS_DEPRECATED uint32_t get_position_covariance_size() const { return (uint32_t)position_covariance.size(); }
private:
  static const char* __s_getDataType_() { return "slam_makin/Landmark"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "ddf48c68437a26f2250fc9b5c4118fb2"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "time last_update\n\
string landmark_id\n\
geometry_msgs/Point position\n\
float64[9] position_covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, last_update);
    ros::serialization::serialize(stream, landmark_id);
    ros::serialization::serialize(stream, position);
    ros::serialization::serialize(stream, position_covariance);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, last_update);
    ros::serialization::deserialize(stream, landmark_id);
    ros::serialization::deserialize(stream, position);
    ros::serialization::deserialize(stream, position_covariance);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(last_update);
    size += ros::serialization::serializationLength(landmark_id);
    size += ros::serialization::serializationLength(position);
    size += ros::serialization::serializationLength(position_covariance);
    return size;
  }

  typedef boost::shared_ptr< ::slam_makin::Landmark_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_makin::Landmark_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Landmark
typedef  ::slam_makin::Landmark_<std::allocator<void> > Landmark;

typedef boost::shared_ptr< ::slam_makin::Landmark> LandmarkPtr;
typedef boost::shared_ptr< ::slam_makin::Landmark const> LandmarkConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::slam_makin::Landmark_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::slam_makin::Landmark_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace slam_makin

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::slam_makin::Landmark_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::slam_makin::Landmark_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::slam_makin::Landmark_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ddf48c68437a26f2250fc9b5c4118fb2";
  }

  static const char* value(const  ::slam_makin::Landmark_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xddf48c68437a26f2ULL;
  static const uint64_t static_value2 = 0x250fc9b5c4118fb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_makin::Landmark_<ContainerAllocator> > {
  static const char* value() 
  {
    return "slam_makin/Landmark";
  }

  static const char* value(const  ::slam_makin::Landmark_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::slam_makin::Landmark_<ContainerAllocator> > {
  static const char* value() 
  {
    return "time last_update\n\
string landmark_id\n\
geometry_msgs/Point position\n\
float64[9] position_covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::slam_makin::Landmark_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::slam_makin::Landmark_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.last_update);
    stream.next(m.landmark_id);
    stream.next(m.position);
    stream.next(m.position_covariance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Landmark_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slam_makin::Landmark_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::slam_makin::Landmark_<ContainerAllocator> & v) 
  {
    s << indent << "last_update: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.last_update);
    s << indent << "landmark_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.landmark_id);
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "position_covariance[]" << std::endl;
    for (size_t i = 0; i < v.position_covariance.size(); ++i)
    {
      s << indent << "  position_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_covariance[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SLAM_MAKIN_MESSAGE_LANDMARK_H

