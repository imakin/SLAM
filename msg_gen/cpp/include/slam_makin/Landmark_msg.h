/* Auto-generated by genmsg_cpp for file /home/kaca/ros/slam_makin/msg/Landmark_msg.msg */
#ifndef SLAM_MAKIN_MESSAGE_LANDMARK_MSG_H
#define SLAM_MAKIN_MESSAGE_LANDMARK_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace slam_makin
{
template <class ContainerAllocator>
struct Landmark_msg_ {
  typedef Landmark_msg_<ContainerAllocator> Type;

  Landmark_msg_()
  : landmark_count(0)
  , x()
  , y()
  , range()
  , bearing()
  , id()
  {
    x.assign(0.0);
    y.assign(0.0);
    range.assign(0);
    bearing.assign(0);
    id.assign(0);
  }

  Landmark_msg_(const ContainerAllocator& _alloc)
  : landmark_count(0)
  , x()
  , y()
  , range()
  , bearing()
  , id()
  {
    x.assign(0.0);
    y.assign(0.0);
    range.assign(0);
    bearing.assign(0);
    id.assign(0);
  }

  typedef int32_t _landmark_count_type;
  int32_t landmark_count;

  typedef boost::array<double, 100>  _x_type;
  boost::array<double, 100>  x;

  typedef boost::array<double, 100>  _y_type;
  boost::array<double, 100>  y;

  typedef boost::array<int32_t, 100>  _range_type;
  boost::array<int32_t, 100>  range;

  typedef boost::array<int32_t, 100>  _bearing_type;
  boost::array<int32_t, 100>  bearing;

  typedef boost::array<int32_t, 100>  _id_type;
  boost::array<int32_t, 100>  id;


  ROS_DEPRECATED uint32_t get_x_size() const { return (uint32_t)x.size(); }
  ROS_DEPRECATED uint32_t get_y_size() const { return (uint32_t)y.size(); }
  ROS_DEPRECATED uint32_t get_range_size() const { return (uint32_t)range.size(); }
  ROS_DEPRECATED uint32_t get_bearing_size() const { return (uint32_t)bearing.size(); }
  ROS_DEPRECATED uint32_t get_id_size() const { return (uint32_t)id.size(); }
private:
  static const char* __s_getDataType_() { return "slam_makin/Landmark_msg"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "f6754d2ed924c43b64bfcb2e0006aca3"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 landmark_count\n\
\n\
float64[100] x\n\
float64[100] y\n\
int32[100] range\n\
int32[100] bearing\n\
int32[100] id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, landmark_count);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    ros::serialization::serialize(stream, range);
    ros::serialization::serialize(stream, bearing);
    ros::serialization::serialize(stream, id);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, landmark_count);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    ros::serialization::deserialize(stream, range);
    ros::serialization::deserialize(stream, bearing);
    ros::serialization::deserialize(stream, id);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(landmark_count);
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    size += ros::serialization::serializationLength(range);
    size += ros::serialization::serializationLength(bearing);
    size += ros::serialization::serializationLength(id);
    return size;
  }

  typedef boost::shared_ptr< ::slam_makin::Landmark_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_makin::Landmark_msg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Landmark_msg
typedef  ::slam_makin::Landmark_msg_<std::allocator<void> > Landmark_msg;

typedef boost::shared_ptr< ::slam_makin::Landmark_msg> Landmark_msgPtr;
typedef boost::shared_ptr< ::slam_makin::Landmark_msg const> Landmark_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::slam_makin::Landmark_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::slam_makin::Landmark_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace slam_makin

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::slam_makin::Landmark_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::slam_makin::Landmark_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::slam_makin::Landmark_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f6754d2ed924c43b64bfcb2e0006aca3";
  }

  static const char* value(const  ::slam_makin::Landmark_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf6754d2ed924c43bULL;
  static const uint64_t static_value2 = 0x64bfcb2e0006aca3ULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_makin::Landmark_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "slam_makin/Landmark_msg";
  }

  static const char* value(const  ::slam_makin::Landmark_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::slam_makin::Landmark_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 landmark_count\n\
\n\
float64[100] x\n\
float64[100] y\n\
int32[100] range\n\
int32[100] bearing\n\
int32[100] id\n\
\n\
";
  }

  static const char* value(const  ::slam_makin::Landmark_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::slam_makin::Landmark_msg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::slam_makin::Landmark_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.landmark_count);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.range);
    stream.next(m.bearing);
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Landmark_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slam_makin::Landmark_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::slam_makin::Landmark_msg_<ContainerAllocator> & v) 
  {
    s << indent << "landmark_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.landmark_count);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "range[]" << std::endl;
    for (size_t i = 0; i < v.range.size(); ++i)
    {
      s << indent << "  range[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.range[i]);
    }
    s << indent << "bearing[]" << std::endl;
    for (size_t i = 0; i < v.bearing.size(); ++i)
    {
      s << indent << "  bearing[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.bearing[i]);
    }
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.id[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SLAM_MAKIN_MESSAGE_LANDMARK_MSG_H

