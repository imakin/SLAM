/* Auto-generated by genmsg_cpp for file /home/kaca/ros/slam_makin/srv/SetLandmark.srv */
#ifndef SLAM_MAKIN_SERVICE_SETLANDMARK_H
#define SLAM_MAKIN_SERVICE_SETLANDMARK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/PoseWithCovariance.h"



namespace slam_makin
{
template <class ContainerAllocator>
struct SetLandmarkRequest_ {
  typedef SetLandmarkRequest_<ContainerAllocator> Type;

  SetLandmarkRequest_()
  : landmark()
  , topic_name()
  {
  }

  SetLandmarkRequest_(const ContainerAllocator& _alloc)
  : landmark(_alloc)
  , topic_name(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _landmark_type;
   ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  landmark;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  topic_name;


private:
  static const char* __s_getDataType_() { return "slam_makin/SetLandmarkRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "3a728969e9be1948ad1516696bacf677"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "3a728969e9be1948ad1516696bacf677"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/PoseWithCovariance landmark\n\
string topic_name\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, landmark);
    ros::serialization::serialize(stream, topic_name);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, landmark);
    ros::serialization::deserialize(stream, topic_name);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(landmark);
    size += ros::serialization::serializationLength(topic_name);
    return size;
  }

  typedef boost::shared_ptr< ::slam_makin::SetLandmarkRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_makin::SetLandmarkRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetLandmarkRequest
typedef  ::slam_makin::SetLandmarkRequest_<std::allocator<void> > SetLandmarkRequest;

typedef boost::shared_ptr< ::slam_makin::SetLandmarkRequest> SetLandmarkRequestPtr;
typedef boost::shared_ptr< ::slam_makin::SetLandmarkRequest const> SetLandmarkRequestConstPtr;


template <class ContainerAllocator>
struct SetLandmarkResponse_ {
  typedef SetLandmarkResponse_<ContainerAllocator> Type;

  SetLandmarkResponse_()
  {
  }

  SetLandmarkResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "slam_makin/SetLandmarkResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "3a728969e9be1948ad1516696bacf677"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::slam_makin::SetLandmarkResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_makin::SetLandmarkResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetLandmarkResponse
typedef  ::slam_makin::SetLandmarkResponse_<std::allocator<void> > SetLandmarkResponse;

typedef boost::shared_ptr< ::slam_makin::SetLandmarkResponse> SetLandmarkResponsePtr;
typedef boost::shared_ptr< ::slam_makin::SetLandmarkResponse const> SetLandmarkResponseConstPtr;

struct SetLandmark
{

typedef SetLandmarkRequest Request;
typedef SetLandmarkResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetLandmark
} // namespace slam_makin

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::slam_makin::SetLandmarkRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::slam_makin::SetLandmarkRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::slam_makin::SetLandmarkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3a728969e9be1948ad1516696bacf677";
  }

  static const char* value(const  ::slam_makin::SetLandmarkRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3a728969e9be1948ULL;
  static const uint64_t static_value2 = 0xad1516696bacf677ULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_makin::SetLandmarkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "slam_makin/SetLandmarkRequest";
  }

  static const char* value(const  ::slam_makin::SetLandmarkRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::slam_makin::SetLandmarkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseWithCovariance landmark\n\
string topic_name\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::slam_makin::SetLandmarkRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::slam_makin::SetLandmarkResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::slam_makin::SetLandmarkResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::slam_makin::SetLandmarkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::slam_makin::SetLandmarkResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_makin::SetLandmarkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "slam_makin/SetLandmarkResponse";
  }

  static const char* value(const  ::slam_makin::SetLandmarkResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::slam_makin::SetLandmarkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::slam_makin::SetLandmarkResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::slam_makin::SetLandmarkResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::slam_makin::SetLandmarkRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.landmark);
    stream.next(m.topic_name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetLandmarkRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::slam_makin::SetLandmarkResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetLandmarkResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<slam_makin::SetLandmark> {
  static const char* value() 
  {
    return "3a728969e9be1948ad1516696bacf677";
  }

  static const char* value(const slam_makin::SetLandmark&) { return value(); } 
};

template<>
struct DataType<slam_makin::SetLandmark> {
  static const char* value() 
  {
    return "slam_makin/SetLandmark";
  }

  static const char* value(const slam_makin::SetLandmark&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<slam_makin::SetLandmarkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3a728969e9be1948ad1516696bacf677";
  }

  static const char* value(const slam_makin::SetLandmarkRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<slam_makin::SetLandmarkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "slam_makin/SetLandmark";
  }

  static const char* value(const slam_makin::SetLandmarkRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<slam_makin::SetLandmarkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3a728969e9be1948ad1516696bacf677";
  }

  static const char* value(const slam_makin::SetLandmarkResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<slam_makin::SetLandmarkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "slam_makin/SetLandmark";
  }

  static const char* value(const slam_makin::SetLandmarkResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SLAM_MAKIN_SERVICE_SETLANDMARK_H

