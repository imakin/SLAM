/* Auto-generated by genmsg_cpp for file /home/kaca/ros/slam_makin/srv/Landmark_srv.srv */
#ifndef SLAM_MAKIN_SERVICE_LANDMARK_SRV_H
#define SLAM_MAKIN_SERVICE_LANDMARK_SRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace slam_makin
{
template <class ContainerAllocator>
struct Landmark_srvRequest_ {
  typedef Landmark_srvRequest_<ContainerAllocator> Type;

  Landmark_srvRequest_()
  : x()
  , y()
  {
  }

  Landmark_srvRequest_(const ContainerAllocator& _alloc)
  : x(_alloc)
  , y(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  x;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _y_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  y;


  ROS_DEPRECATED uint32_t get_x_size() const { return (uint32_t)x.size(); }
  ROS_DEPRECATED void set_x_size(uint32_t size) { x.resize((size_t)size); }
  ROS_DEPRECATED void get_x_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->x; }
  ROS_DEPRECATED void set_x_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->x = vec; }
  ROS_DEPRECATED uint32_t get_y_size() const { return (uint32_t)y.size(); }
  ROS_DEPRECATED void set_y_size(uint32_t size) { y.resize((size_t)size); }
  ROS_DEPRECATED void get_y_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->y; }
  ROS_DEPRECATED void set_y_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->y = vec; }
private:
  static const char* __s_getDataType_() { return "slam_makin/Landmark_srvRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "796182af49bd48aa8ba60ed21519725c"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "796182af49bd48aa8ba60ed21519725c"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64[] x\n\
float64[] y\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, x);
    ros::serialization::serialize(stream, y);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, x);
    ros::serialization::deserialize(stream, y);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(x);
    size += ros::serialization::serializationLength(y);
    return size;
  }

  typedef boost::shared_ptr< ::slam_makin::Landmark_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_makin::Landmark_srvRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Landmark_srvRequest
typedef  ::slam_makin::Landmark_srvRequest_<std::allocator<void> > Landmark_srvRequest;

typedef boost::shared_ptr< ::slam_makin::Landmark_srvRequest> Landmark_srvRequestPtr;
typedef boost::shared_ptr< ::slam_makin::Landmark_srvRequest const> Landmark_srvRequestConstPtr;


template <class ContainerAllocator>
struct Landmark_srvResponse_ {
  typedef Landmark_srvResponse_<ContainerAllocator> Type;

  Landmark_srvResponse_()
  {
  }

  Landmark_srvResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "slam_makin/Landmark_srvResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "796182af49bd48aa8ba60ed21519725c"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::slam_makin::Landmark_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_makin::Landmark_srvResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Landmark_srvResponse
typedef  ::slam_makin::Landmark_srvResponse_<std::allocator<void> > Landmark_srvResponse;

typedef boost::shared_ptr< ::slam_makin::Landmark_srvResponse> Landmark_srvResponsePtr;
typedef boost::shared_ptr< ::slam_makin::Landmark_srvResponse const> Landmark_srvResponseConstPtr;

struct Landmark_srv
{

typedef Landmark_srvRequest Request;
typedef Landmark_srvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Landmark_srv
} // namespace slam_makin

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::slam_makin::Landmark_srvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::slam_makin::Landmark_srvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::slam_makin::Landmark_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "796182af49bd48aa8ba60ed21519725c";
  }

  static const char* value(const  ::slam_makin::Landmark_srvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x796182af49bd48aaULL;
  static const uint64_t static_value2 = 0x8ba60ed21519725cULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_makin::Landmark_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "slam_makin/Landmark_srvRequest";
  }

  static const char* value(const  ::slam_makin::Landmark_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::slam_makin::Landmark_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] x\n\
float64[] y\n\
\n\
\n\
";
  }

  static const char* value(const  ::slam_makin::Landmark_srvRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::slam_makin::Landmark_srvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::slam_makin::Landmark_srvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::slam_makin::Landmark_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::slam_makin::Landmark_srvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_makin::Landmark_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "slam_makin/Landmark_srvResponse";
  }

  static const char* value(const  ::slam_makin::Landmark_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::slam_makin::Landmark_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::slam_makin::Landmark_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::slam_makin::Landmark_srvResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::slam_makin::Landmark_srvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Landmark_srvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::slam_makin::Landmark_srvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Landmark_srvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<slam_makin::Landmark_srv> {
  static const char* value() 
  {
    return "796182af49bd48aa8ba60ed21519725c";
  }

  static const char* value(const slam_makin::Landmark_srv&) { return value(); } 
};

template<>
struct DataType<slam_makin::Landmark_srv> {
  static const char* value() 
  {
    return "slam_makin/Landmark_srv";
  }

  static const char* value(const slam_makin::Landmark_srv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<slam_makin::Landmark_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "796182af49bd48aa8ba60ed21519725c";
  }

  static const char* value(const slam_makin::Landmark_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<slam_makin::Landmark_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "slam_makin/Landmark_srv";
  }

  static const char* value(const slam_makin::Landmark_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<slam_makin::Landmark_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "796182af49bd48aa8ba60ed21519725c";
  }

  static const char* value(const slam_makin::Landmark_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<slam_makin::Landmark_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "slam_makin/Landmark_srv";
  }

  static const char* value(const slam_makin::Landmark_srvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SLAM_MAKIN_SERVICE_LANDMARK_SRV_H

